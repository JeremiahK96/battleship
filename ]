#include "global.hpp"
#include "Player.hpp"

#include <iostream>
#include <cassert>
#include <string>
#include <vector>
#include <memory>

void global::DoAsserts ()
{
    AssertCoordinateInBounds();
}

void global::SplashScreen ()
{
    std::cout
        << "Welcome to battleship, a terminal-based navy combat game.\n\n";
}

bool global::CoordinateInBounds (int coord)
{
    return coord >= 0 && coord < board_width * board_height;
}

void global::AssertCoordinateInBounds ()
{
    assert(CoordinateInBounds(0));
    assert(!CoordinateInBounds(-1));
    assert(CoordinateInBounds(board_width * board_height - 1));
    assert(!CoordinateInBounds(board_width * board_height));
}

bool global::IsValidAlphaNumeric (const std::string &alphanum)
{
    if (alphanum.length() < 2)
        return false;

    unsigned char alpha = std::toupper(alphanum.at(0));
    unsigned char digit = alphanum.at(1);

    if (alpha < 'A' || alpha >= char('A' + global::board_height))
        return false;
    if (!std::isdigit(digit) || std::stoi(alphanum.substr(1)))
        return false;

    return true;
}

void global::AssertIsValidAlphaNumeric ()
{
    assert(!IsValidAlphaNumeric(std::string("")));
    assert(!IsValidAlphaNumeric(std::string("A")));
    assert(!IsValidAlphaNumeric(std::string("AH")));
    assert(!IsValidAlphaNumeric(std::string("1A")));
    assert(!IsValidAlphaNumeric(std::string("!*")));
    assert(!IsValidAlphaNumeric(std::string("A*")));
    assert(!IsValidAlphaNumeric(std::string("!1")));
    assert(!IsValidAlphaNumeric(std::string("A0")));

    std::string lo_num = "1";
    std::string hi_num = std::to_string(global::board_width);
    std::string lo_alp = "A";
    std::string hi_alp = "A";
    hi_alp.at(0) += global::board_height - 1;
}

unsigned int global::AlphaNumericToCoordinate (std::string &alphanum)
{
    unsigned char alpha = alphanum.at(0);
    unsigned int num = std::stoi(alphanum.substr(1));

    return int(alpha - 'A') * global::board_width + num;
}

void global::PlayGame ()
{
    do
    {
        int num_players = QueryNumPlayers();
        assert(num_players >= 0 && num_players <= 2);

        std::vector <std::unique_ptr<Player>> players;
        assert(players.empty());

        AddPlayers(players, num_players);
    } while (QueryNewGame());
}

int global::QueryNumPlayers ()
{
    int num_players = -1;

    while (num_players < 0 || num_players > 2)
    {
        std::string input;

        std::cout << "Number of players   ";
        std::getline(std::cin, input);

        if (input.size() && std::isdigit(input.at(0)))
            num_players = std::stoi(input);
    }

    return num_players;
}

void global::AddPlayers(std::vector <std::unique_ptr<Player>> &players, int num_players)
{
    // Add all Human players.
    for (int i = 0; i < num_players; ++i)
    {
        std::unique_ptr<Human> human = std::make_unique<Human>();
        human->PlaceShips();
        players.push_back(std::move(human));
    }
    assert(players.size() == num_players);
}

bool global::QueryNewGame ()
{
    std::string input;
    assert(input.empty());

    while (input.compare("y") && input.compare("n"))
    {
        std::cout << "Would you like to play again?   ";
        std::getline(std::cin, input);
    }
    assert(!input.compare("y") || !input.compare("n"));

    if (!input.compare("y"))
        return true;
    return false;
}
